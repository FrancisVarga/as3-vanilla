AS3 Auto Marshaller
===================
*This library is not anywhere ready for production and is still under development!*

A lightweight library which aims to automatically marshal a Plain Old ActionScript 3 object into a strongly typed Model.  
An example use case would be turning data returned from a JSON endpoint into a Model, if you've ever written the 
following code, then you can benefit from this library.

```actionscript
// Use a JSON library to convert a JSON String into an AS3 Object.
var jsonObject : Object = JSON.decode({"name":"Jonny", "age": 28, "music":["nin","mew"]});

// Copy all the data into a new PersonVO so the rest of the system can use it.
var myPerson : PersonVO = new PersonVO();
myPerson.name = jsonObject["name"];
myPerson.age = jsonObject["age"];
myPerson.music = jsonObject["music"];

trace(myPerson.name) // Jonny.
```

Using the AutoMarshaller library, you can turn the above code into this:

```actionscript
// Use a JSON library to convert a JSON String into an AS3 Object.
var jsonObject : Object = JSON.decode({"name":"Jonny", "age": 28, "music":["nin","mew"]});

// Use the AutoMarshaller to convert it into a PersonVO.
const myPerson : PersonVO = new AutoMarshaller().extract(jsonObject, PersonVO);

trace(myPerson.name);  // "Jonny"
```

Although the AutoMarshaller library does make use of Metadata, it is by no means required - the goal of this library
is to make the marshalling as transparent and painless as possible; if the source Object's fields maps perfectly to
the fields of your Model object (as in the example above) then everything should 'just work'(tm).


Mapping Fields
--------------
Sometimes the fields on your Model object don't quite match up to the fields in your source object; not a problem, 
you can use Metadata to define the mappings in your Model object:

```actionscript
package app.model {
	public class PersonVO {
		public var name : String;
		public var age : uint;
		[Marshall(field="music")] public var musicTastes : Array;
	}
}
```


Mapping to Constructor Arguments
--------------------------------
If you're a fan of immutable models then you will want to define some Metadata to map the fields in your source object
to the constructor arguments of your Model object:

```actionscript
package app.model {
	[Marshall(field="name", field="age", field="music")]
	public class PersonModel {
		private var _name : String;
		private var _age : uint;
		private var _musicTastes : Array;
	
    	public function PersonModel(name, age, music : Array) {
    		_name = name;
    		_age = age;
    		_music = music;
    	}
    }
}
```


Mapping to Methods / Mutators
-----------------------------
You can map the fields of your source object to a setter method in your Model object:

```actionscript
package app.model {
	public class PersonModel {
		private var _name : String;
		private var _age : uint;
		private var _music : Array;
		
		[Marshall(field="name", field="age")]
		public function init(name : String, age : uint) : void {
			_name = name;
			_age = age;
		}
		
		[Marshal(field="music")]
		public function setMusic(value : Array) : void {
			_music = value;
    }
}
```


Future Features / Wish List
---------------------------
* Java style mutators (eg: `setFoo()`) could be mapped automatically.
* The user should be able to define mapping rules without having to use Metadata.
* By using `as3commons-bytecode` we could perform ByteCode reflection to retrieve the names of parameters; this would 
would remove the need for constructor marshalling metadata.
 